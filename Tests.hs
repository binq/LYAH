{-# LANGUAGE CPP #-}

import Test.HUnit
import Text.Printf
import Baby
import Control.Applicative

main = do
  runTestTT $ TestList [assertEqualTestCase __LINE__ 4 $ doubleMe 2,
                        assertEqualTestCase __LINE__ 10 $ doubleUs 2 3,
                        assertEqualTestCase __LINE__ 4 $ doubleSmallNumber 2,
                        assertEqualTestCase __LINE__ 1000 $ doubleSmallNumber' 1000,
                        assertEqualTestCase __LINE__ "It's a-me, Conan O'Brien!" $ conanO'Brien,
                        assertEqualTestCase __LINE__ 6 $ addThree 1 2 3,
                        assertEqualTestCase __LINE__ 24 $ factorial 4,
                        assertEqualTestCase __LINE__ 25.1327412 $ circumference 4,
                        assertEqualTestCase __LINE__ 25.132741228718345 $ circumference' 4,
                        assertEqualTestCase __LINE__ "Luck number SEVEN!" $ lucky 7,
                        assertEqualTestCase __LINE__ 24 $ factorial' 4,
                        assertEqualTestCase __LINE__ "Nine" $ charName '9',
                        assertEqualTestCase __LINE__ (6, 10) $ addVectors (1, 3) (5, 7),
                        assertEqualTestCase __LINE__ 2 $ first (2, 4, 6),
                        assertEqualTestCase __LINE__ 4 $ second (2, 4, 6),
                        assertEqualTestCase __LINE__ 6 $ third (2, 4, 6),
                        assertEqualTestCase __LINE__ [4, 7, 6, 8, 11, 4] $ patternMatchInComprehensions [(1,3), (4,3), (2,4), (5, 3), (5,6), (3,1)],
                        assertEqualTestCase __LINE__ 6 $ head' [6, 2, 3],
                        assertEqualTestCase __LINE__ "Whiskey" $ nameit 'w',
                        assertEqualTestCase __LINE__ "Nine" $ nameit (9 :: Integer),
                        assertEqualTestCase __LINE__ "The list has one element: [1]" $ tell [1],
                        assertEqualTestCase __LINE__ 3 $ length' [1, 2, 3],
                        assertEqualTestCase __LINE__ 10 $ sum' [1, 2, 3, 4],
                        assertEqualTestCase __LINE__ "The first letter of: \"Hello World!\" is 'H'" $ capital "Hello World!",
                        assertEqualTestCase __LINE__ "You're fat! Lose some weight fatty!" $ bmiTell 27,
                        assertEqualTestCase __LINE__ "You're fat! Lose some weight fatty!" $ bmiTell' 215 5 11,
                        assertEqualTestCase __LINE__ 3 $ max' 2 3,
                        assertEqualTestCase __LINE__ EQ $ myCompare 3 3,
                        assertEqualTestCase __LINE__ "V. S." $ initials "Vanson" "Samuel",
                        assertEqualTestCase __LINE__ [29.983138266217022] $ calcBmis [(215, 5, 11)],
                        assertEqualTestCase __LINE__ 87.96459430051421 $ cylinder 2 5,
                        assertEqualTestCase __LINE__ 42 $ 4 * (let x = 9 in x + 1) + 2,
                        assertEqualTestCase __LINE__ [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] $ [let square x = x^2 in square i | i <- [1..10]],
                        assertEqualTestCase __LINE__ [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] $ [square | i <- [1..10], let square = i ^ 2],
                        assertEqualTestCase __LINE__ [29.983138266217022] $ calcBmis' [(215, 5, 11)],
                        assertEqualTestCase __LINE__ "The list is a longer list." $ describeList [1, 2],
                        {- Recursion -}
                        assertEqualTestCase __LINE__ 83 $ maximum' [45, 12, 11, 18, 27, 20, 82, 83, 26, 82],
                        assertEqualTestCase __LINE__ "xxx" $ replicate' 3 'x',
                        assertEqualTestCase __LINE__ [300, 301, 302] $ take' 3 [300..400],
                        assertEqualTestCase __LINE__ [5, 4, 3, 2, 1] $ reverse' [1..5],
                        assertEqualTestCase __LINE__ "xxx" $ take' 3 $ repeat 'x',
                        assertEqualTestCase __LINE__ [('a', 1), ('b', 2), ('c', 3)] $ zip' "abc" [1, 2, 3],
                        assertEqualTestCase __LINE__ True $ elem' 'x' "abxc",
                        assertEqualTestCase __LINE__ [2, 6, 9, 11, 16, 29, 31, 56, 63, 96] $ quicksort [56, 11, 16, 9, 2, 96, 63, 31, 29, 6],
                        assertEqualTestCase __LINE__ [2, 6, 9, 11, 16, 29, 31, 56, 63, 96] $ mergesort [56, 11, 16, 9, 2, 96, 63, 31, 29, 6],
                        {- Higher order functions -}
                        assertEqualTestCase __LINE__ 2.0 $ divideByTen 20,
                        assertEqualTestCase __LINE__ 8 $ applyTwice (*2) 2,
                        assertEqualTestCase __LINE__ [10, 10, 10, 10, 10, 10, 10, 10, 10] $ zipWith' (+) [1..9] $ reverse [1..9],
                        assertEqualTestCase __LINE__ 2 $ flip' (/) 2 4,
                        assertEqualTestCase __LINE__ 99554 $ largestDivisible 100000,
                        assertEqualTestCase __LINE__ 66 $ chainQuery 100 15,
                        assertEqualTestCase __LINE__ [2, 3, 4] $ map' (\a -> a + 1) [1, 2, 3],
                        assertEqualTestCase __LINE__ [3, 2, 1] $ reverse' [1, 2, 3],
                        assertEqualTestCase __LINE__ 131 $ squareRootQuery 1000,
                        assertEqualTestCase __LINE__ [-1, -2, -3] $ ensureNegative [-1, 2, -3],
                        {- Modules -}
                        assertEqualTestCase __LINE__ 8 $ numUniques "hello world",
                        assertEqualTestCase __LINE__ "Khhhhh|" $ encode 3 "Heeeeey",
                        assertEqualTestCase __LINE__ "Heeeeey" $ decode 3 "Khhhhh|",
                        assertEqualTestCase __LINE__ (Just "452-2928") $ findKey "bonnie" [("betty","555-2938") ,("bonnie","452-2928") ,("patsy","493-2928") ,("lucille","205-2928") ,("wendy","939-8282") ,("penny","853-2492")],
                        {- Making Our Own Types and Typeclasses -}
                        assertEqualTestCase __LINE__ 314.15927 $ (surface $ Circle (Point 10 20) 10),
                        assertEqualTestCase __LINE__ 10000.0 $ (surface $ Rectangle (Point 0 0) (Point 100 100)),
                        assertEqualTestCase __LINE__ (Circle (Point 39.0 44.0) 10.0) $ nudge (Circle (Point 34 34) 10) 5 10,
                        assertEqualTestCase __LINE__ (Circle (Point 60.0 23.0) 5) $ nudge (baseCircle 5) 60 23,
                        assertEqualTestCase __LINE__ (Rectangle (Point 60.0 23.0) (Point 100.0 123.0)) $ nudge (baseRect 40 100) 60 23,
                        assertEqualTestCase __LINE__ "This Ford Mustang was made in 1967" $ (tellCar $ Car {company="Ford", model="Mustang", year=1967}),
                        assertEqualTestCase __LINE__ (Vector 12 7 16) $ vplus (Vector 3 5 8) (Vector 9 2 8),
                        assertEqualTestCase __LINE__ (Vector 12 9 19) $ vplus (Vector 3 5 8) $ vplus (Vector 9 2 8) (Vector 0 2 3),
                        assertEqualTestCase __LINE__ (Vector 30 90 70) $ vectMult (Vector 3 9 7) 10,
                        assertEqualTestCase __LINE__ (74.0) $ scalarMult (Vector 4 9 5) (Vector 9.0 2.0 4.0),
                        assertEqualTestCase __LINE__ (Vector 148 666 222) $ vectMult (Vector 2 9 3) $ scalarMult (Vector 4 9 5) (Vector 9 2 4),
                        assertEqualTestCase __LINE__ True $ inPhoneBook "bonnie" "452-2928" [("betty","555-2938"), ("bonnie","452-2928"), ("patsy","493-2928"), ("lucille","205-2928")],
                        assertEqualTestCase __LINE__ (Right "JAH3I") $ lockerLookup 101 Baby.lockers,
                        assertEqualTestCase __LINE__ (Left "Locker 100 is already taken!") $ lockerLookup 100 Baby.lockers,
                        assertEqualTestCase __LINE__ (Left "Locker number 102 doesn't exist!") $ lockerLookup 102 Baby.lockers,
                        assertEqualTestCase __LINE__ (Left "Locker 110 is already taken!") $ lockerLookup 110 Baby.lockers,
                        assertEqualTestCase __LINE__ (Right "QOTSA") $ lockerLookup 105 Baby.lockers,
                        assertEqualTestCase __LINE__ True $ 8 `treeElem` numsTree,
                        assertEqualTestCase __LINE__ False $ 100 `treeElem` numsTree,
                        assertEqualTestCase __LINE__ True $ 1 `treeElem` numsTree,
                        assertEqualTestCase __LINE__ False $ 10 `treeElem` numsTree,
                        assertEqualTestCase __LINE__ True $ Red == Red,
                        assertEqualTestCase __LINE__ False $ Red == Yellow,
                        assertEqualTestCase __LINE__ True $ Red `elem` [Red, Yellow, Green],
                        assertEqualTestCase __LINE__ "[Red light,Yellow light,Green light]" $ show $ [Red, Yellow, Green],
                        assertEqualTestCase __LINE__ False $ yesno $ length [],
                        assertEqualTestCase __LINE__ True $ yesno "haha",
                        assertEqualTestCase __LINE__ False $ yesno "",
                        assertEqualTestCase __LINE__ True $ yesno $ Just 0,
                        assertEqualTestCase __LINE__ True $ yesno True,
                        assertEqualTestCase __LINE__ False $ yesno EmptyTree,
                        assertEqualTestCase __LINE__ False $ yesno [],
                        assertEqualTestCase __LINE__ True $ yesno [0,0,0],
                        assertEqualTestCase __LINE__ "NO!" $ yesnoIf [] "YEAH!" "NO!",
                        assertEqualTestCase __LINE__ "YEAH!" $ yesnoIf [2,3,4] "YEAH!" "NO!",
                        assertEqualTestCase __LINE__ "YEAH!" $ yesnoIf True "YEAH!" "NO!",
                        assertEqualTestCase __LINE__ "YEAH!" $ yesnoIf (Just 500) "YEAH!" "NO!",
                        assertEqualTestCase __LINE__ "NO!" $ yesnoIf Nothing "YEAH!" "NO!",
                        assertEqualTestCase __LINE__ EmptyTree $ fmap (*2) EmptyTree,
                        assertEqualTestCase __LINE__ (Node 28 (Node 4 EmptyTree (Node 8 EmptyTree (Node 12 EmptyTree (Node 20 EmptyTree EmptyTree)))) EmptyTree) $ fmap (*4) (foldr treeInsert EmptyTree [5,7,3,2,1,7]),
                        assertEqualTestCase __LINE__ Barry {yabba = 4, dabba = Just 4} $ (+1) <$> Barry 3 (Just 4),
                        {- end -}
                        assertEqualTestCase __LINE__ True True]
  where
    assertEqualTestCase :: (Show a, Eq a, Num b) => b -> a -> a -> Test
    assertEqualTestCase w x y = TestCase $ assertEqual (printf "Line: %s" $ show w) x y
